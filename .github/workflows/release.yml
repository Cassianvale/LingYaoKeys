name: Release Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: '新版本号 (例如: 1.3.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: '6.x'

      - name: Setup Aliyun CLI
        run: |
          # 下载并安装阿里云 CLI
          Invoke-WebRequest -Uri "https://aliyuncli.alicdn.com/aliyun-cli-windows-latest-amd64.zip" -OutFile "aliyun-cli.zip"
          Expand-Archive -Path "aliyun-cli.zip" -DestinationPath "aliyun-cli"
          $env:PATH += ";$pwd\aliyun-cli"
          
          # 配置阿里云凭证
          aliyun configure set --mode AK --profile default --region cn-shanghai --language zh --access-key-id "${{ secrets.OSS_ACCESS_KEY_ID }}" --access-key-secret "${{ secrets.OSS_ACCESS_KEY_SECRET }}"
        shell: pwsh

      - name: Update Version
        run: |
          # 获取当前工作目录
          $workDir = Get-Location
          Write-Host "Current working directory: $workDir"
          
          # 1. 更新 csproj 文件版本号
          $csprojPath = Join-Path $workDir "WpfApp.csproj"
          Write-Host "Updating csproj file: $csprojPath"
          
          if (Test-Path $csprojPath) {
              $content = Get-Content $csprojPath
              $content = $content -replace '<Version>.*</Version>', "<Version>${{ github.event.inputs.version }}</Version>"
              Set-Content -Path $csprojPath -Value $content -Encoding UTF8
              Write-Host "Updated version in csproj file"
          } else {
              Write-Error "csproj file not found: $csprojPath"
              exit 1
          }
        shell: pwsh

      - name: Restore NuGet packages
        run: |
          nuget restore WpfApp.csproj -Source https://api.nuget.org/v3/index.json
          dotnet restore --verbosity normal
        
      - name: Build and Publish
        run: |
          # 清理
          dotnet clean -c Release
          
          # 构建 Release 版本以触发 Fody
          dotnet build -c Release -p:Platform=x64
          
          # 发布 (框架依赖模式)
          dotnet publish -c Release -p:Platform=x64 -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true
          
          # 验证发布的文件
          $publishDir = "bin/Release/publish"
          $exePath = Join-Path $publishDir "LingYaoKeys.exe"
          
          if (Test-Path $exePath) {
              $fileInfo = Get-Item $exePath
              Write-Host "Published file size: $($fileInfo.Length) bytes"
              Write-Host "Published file path: $exePath"
              Get-ChildItem $publishDir -Recurse | ForEach-Object {
                  Write-Host $_.FullName
              }
          } else {
              Write-Error "Published file not found: $exePath"
              exit 1
          }
        shell: pwsh
        
      - name: Create version.json
        run: |
          $versionJson = @{
              version = "${{ github.event.inputs.version }}"
              releaseNotes = "Version ${{ github.event.inputs.version }} update"
              downloadUrl = "https://github.com/Cassianvale/LingYaoKeys/releases/download/v${{ github.event.inputs.version }}/LingYaoKeys.exe"
          } | ConvertTo-Json
          Set-Content -Path "version.json" -Value $versionJson -Encoding UTF8
          
          # 上传到阿里云 OSS
          Write-Host "Uploading to OSS..."
          aliyun oss cp version.json oss://lykeys-remote/version.json --force
        shell: pwsh

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: |
            bin/Release/publish/LingYaoKeys.exe
            version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 