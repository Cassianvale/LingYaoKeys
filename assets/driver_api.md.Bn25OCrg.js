import{_ as s,c as i,o as a,ag as d}from"./chunks/framework.C48t5LJr.js";const u=JSON.parse('{"title":"驱动接口文档","description":"","frontmatter":{},"headers":[],"relativePath":"driver/api.md","filePath":"driver/api.md","lastUpdated":1742393041000}'),e={name:"driver/api.md"};function n(l,t,h,r,p,o){return a(),i("div",null,t[0]||(t[0]=[d(`<h1 id="驱动接口文档" tabindex="-1">驱动接口文档 <a class="header-anchor" href="#驱动接口文档" aria-label="Permalink to &quot;驱动接口文档&quot;">​</a></h1><h2 id="接口列表" tabindex="-1">接口列表 <a class="header-anchor" href="#接口列表" aria-label="Permalink to &quot;接口列表&quot;">​</a></h2><h3 id="驱动管理接口" tabindex="-1">驱动管理接口 <a class="header-anchor" href="#驱动管理接口" aria-label="Permalink to &quot;驱动管理接口&quot;">​</a></h3><div class="driver-api-table"><table tabindex="0"><thead><tr><th>函数名</th><th>参数列表</th><th>返回值类型</th><th>功能描述</th><th>示例</th></tr></thead><tbody><tr><td>LoadNTDriver</td><td>char* lpszDriverName, char* lpszDriverPath</td><td>BOOL</td><td>加载NT驱动程序</td><td>LoadNTDriver(&quot;lykeys&quot;, &quot;lykeys.sys&quot;)</td></tr><tr><td>UnloadNTDriver</td><td>char* szSvrName</td><td>BOOL</td><td>卸载NT驱动程序</td><td>UnloadNTDriver(&quot;lykeys&quot;)</td></tr><tr><td>SetHandle</td><td>void</td><td>BOOL</td><td>设置驱动句柄</td><td>SetHandle()</td></tr><tr><td>GetDriverHandle</td><td>void</td><td>HANDLE</td><td>获取驱动句柄</td><td>GetDriverHandle()</td></tr><tr><td>GetDriverStatus</td><td>void</td><td>DEVICE_STATUS</td><td>获取驱动状态</td><td>GetDriverStatus()</td></tr><tr><td>GetLastCheckTime</td><td>void</td><td>ULONGLONG</td><td>获取上次检查时间</td><td>GetLastCheckTime()</td></tr></tbody></table></div><h3 id="键盘操作接口" tabindex="-1">键盘操作接口 <a class="header-anchor" href="#键盘操作接口" aria-label="Permalink to &quot;键盘操作接口&quot;">​</a></h3><div class="keyboard-api-table"><table tabindex="0"><thead><tr><th>函数名</th><th>参数列表</th><th>返回值类型</th><th>功能描述</th><th>示例</th></tr></thead><tbody><tr><td>KeyDown</td><td>USHORT VirtualKey</td><td>void</td><td>模拟键盘按键按下</td><td>KeyDown(0x41) // 按下A键</td></tr><tr><td>KeyUp</td><td>USHORT VirtualKey</td><td>void</td><td>模拟键盘按键抬起</td><td>KeyUp(0x41) // 抬起A键</td></tr></tbody></table></div><h3 id="鼠标操作接口" tabindex="-1">鼠标操作接口 <a class="header-anchor" href="#鼠标操作接口" aria-label="Permalink to &quot;鼠标操作接口&quot;">​</a></h3><div class="mouse-api-table"><table tabindex="0"><thead><tr><th>函数名</th><th>参数列表</th><th>返回值类型</th><th>功能描述</th><th>示例</th></tr></thead><tbody><tr><td>MouseMoveRELATIVE</td><td>LONG dx, LONG dy</td><td>void</td><td>鼠标相对移动</td><td>MouseMoveRELATIVE(10, 20)</td></tr><tr><td>MouseMoveABSOLUTE</td><td>LONG dx, LONG dy</td><td>void</td><td>鼠标绝对移动</td><td>MouseMoveABSOLUTE(100, 200)</td></tr><tr><td>MouseLeftButtonDown</td><td>void</td><td>void</td><td>鼠标左键按下</td><td>MouseLeftButtonDown()</td></tr><tr><td>MouseLeftButtonUp</td><td>void</td><td>void</td><td>鼠标左键抬起</td><td>MouseLeftButtonUp()</td></tr><tr><td>MouseRightButtonDown</td><td>void</td><td>void</td><td>鼠标右键按下</td><td>MouseRightButtonDown()</td></tr><tr><td>MouseRightButtonUp</td><td>void</td><td>void</td><td>鼠标右键抬起</td><td>MouseRightButtonUp()</td></tr><tr><td>MouseMiddleButtonDown</td><td>void</td><td>void</td><td>鼠标中键按下</td><td>MouseMiddleButtonDown()</td></tr><tr><td>MouseMiddleButtonUp</td><td>void</td><td>void</td><td>鼠标中键抬起</td><td>MouseMiddleButtonUp()</td></tr><tr><td>MouseXButton1Down</td><td>void</td><td>void</td><td>鼠标X1键按下</td><td>MouseXButton1Down()</td></tr><tr><td>MouseXButton1Up</td><td>void</td><td>void</td><td>鼠标X1键抬起</td><td>MouseXButton1Up()</td></tr><tr><td>MouseXButton2Down</td><td>void</td><td>void</td><td>鼠标X2键按下</td><td>MouseXButton2Down()</td></tr><tr><td>MouseXButton2Up</td><td>void</td><td>void</td><td>鼠标X2键抬起</td><td>MouseXButton2Up()</td></tr><tr><td>MouseWheelUp</td><td>USHORT wheelDelta</td><td>void</td><td>鼠标滚轮向上</td><td>MouseWheelUp(120)</td></tr><tr><td>MouseWheelDown</td><td>USHORT wheelDelta</td><td>void</td><td>鼠标滚轮向下</td><td>MouseWheelDown(120)</td></tr></tbody></table></div><h2 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h2><h3 id="初始化驱动" tabindex="-1">初始化驱动 <a class="header-anchor" href="#初始化驱动" aria-label="Permalink to &quot;初始化驱动&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载驱动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoadNTDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lykeys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lykeys.sys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置句柄</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEVICE_STATUS status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetDriverStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEVICE_STATUS_READY) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 驱动就绪</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="键盘操作" tabindex="-1">键盘操作 <a class="header-anchor" href="#键盘操作" aria-label="Permalink to &quot;键盘操作&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按下A键</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待一段时间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抬起A键</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="鼠标操作" tabindex="-1">鼠标操作 <a class="header-anchor" href="#鼠标操作" aria-label="Permalink to &quot;鼠标操作&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移动鼠标</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MouseMoveRELATIVE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 点击左键</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MouseLeftButtonDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MouseLeftButtonUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 滚动鼠标</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MouseWheelUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><h3 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h3><ul><li>所有接口都是线程安全的</li><li>多线程环境下无需额外同步措施</li><li>建议在主线程中进行驱动加载和卸载</li></ul><h3 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h3><ul><li>检查函数返回值</li><li>使用GetLastError获取错误码</li><li>实现错误重试机制</li></ul><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><ul><li>合理设置按键间隔</li><li>避免频繁调用</li><li>及时释放资源</li></ul>`,22)]))}const E=s(e,[["render",n]]);export{u as __pageData,E as default};
