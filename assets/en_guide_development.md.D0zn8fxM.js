import{_ as a,c as n,o as s,ag as i}from"./chunks/framework.C48t5LJr.js";const u=JSON.parse('{"title":"Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/development.md","filePath":"en/guide/development.md","lastUpdated":1742393041000}'),l={name:"en/guide/development.md"};function t(o,e,r,p,d,c){return s(),n("div",null,e[0]||(e[0]=[i(`<h1 id="development-guide" tabindex="-1">Development Guide <a class="header-anchor" href="#development-guide" aria-label="Permalink to &quot;Development Guide&quot;">​</a></h1><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LingYaoKeys/</span></span>
<span class="line"><span>├── Views/                          # View Layer</span></span>
<span class="line"><span>│   └── Controls/                   # Keyboard and Mouse Layout Logic</span></span>
<span class="line"><span>├── ViewModels/                     # ViewModel Layer</span></span>
<span class="line"><span>│   ├── ViewModelBase.cs           # Base ViewModel Class</span></span>
<span class="line"><span>│   ├── MainViewModel.cs           # Main Window ViewModel</span></span>
<span class="line"><span>│   ├── KeyMappingViewModel.cs     # Key Mapping ViewModel</span></span>
<span class="line"><span>│   ├── FloatingStatusViewModel.cs # Floating Status ViewModel</span></span>
<span class="line"><span>│   ├── QRCodeViewModel.cs         # QR Code ViewModel</span></span>
<span class="line"><span>│   ├── FeedbackViewModel.cs       # Feedback ViewModel</span></span>
<span class="line"><span>│   └── AboutViewModel.cs          # About ViewModel</span></span>
<span class="line"><span>├── Services/                       # Service Layer</span></span>
<span class="line"><span>│   ├── Core/                      # Core Services</span></span>
<span class="line"><span>│   │   ├── HotkeyService.cs        # Hotkey Service Implementation Class</span></span>
<span class="line"><span>│   │   ├── LyKeysService.cs      # Key Service Main Class</span></span>
<span class="line"><span>│   │   ├── LyKeys.cs             # Key Core Implementation Class</span></span>
<span class="line"><span>│   │   ├── LyKeysCode.cs         # Key Code Definition Class</span></span>
<span class="line"><span>│   │   ├── KeyMappingService.cs   # Key Mapping Service</span></span>
<span class="line"><span>│   │   └── InputMethodService.cs  # Input Method Service</span></span>
<span class="line"><span>│   ├── Models/                    # Service Models</span></span>
<span class="line"><span>│   │   ├── KeyItem.cs                # Key Item Model Class</span></span>
<span class="line"><span>│   │   ├── HoldKeyMode.cs           # Hold Key Mode Model Class</span></span>
<span class="line"><span>│   │   └── KeyModeBase.cs           # Key Mode Base Class</span></span>
<span class="line"><span>│   ├── Utils/                    # Utility Services</span></span>
<span class="line"><span>│   ├── Events/                   # Event Services</span></span>
<span class="line"><span>│   ├── Cache/                    # Cache Services</span></span>
<span class="line"><span>│   ├── Audio/                    # Audio Services</span></span>
<span class="line"><span>│   └── Config/                   # Configuration Services</span></span>
<span class="line"><span>├── Converters/                    # Value Converters</span></span>
<span class="line"><span>├── Behaviors/                     # Behavior Definitions</span></span>
<span class="line"><span>├── Styles/                        # Style Definitions</span></span>
<span class="line"><span>├── Resource/                      # Resource Files</span></span>
<span class="line"><span>└── App.xaml                       # Application Definition</span></span></code></pre></div><h2 id="development-environment" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h2><h3 id="required-tools" tabindex="-1">Required Tools <a class="header-anchor" href="#required-tools" aria-label="Permalink to &quot;Required Tools&quot;">​</a></h3><ul><li>Visual Studio 2022</li><li>.NET 8.0 SDK</li><li>Windows Driver Kit (WDK)</li><li>Git</li></ul><h3 id="recommended-tools" tabindex="-1">Recommended Tools <a class="header-anchor" href="#recommended-tools" aria-label="Permalink to &quot;Recommended Tools&quot;">​</a></h3><ul><li>Visual Studio Code</li><li>Git Extensions</li><li>Postman (API testing)</li><li>Fiddler (network debugging)</li></ul><h2 id="development-standards" tabindex="-1">Development Standards <a class="header-anchor" href="#development-standards" aria-label="Permalink to &quot;Development Standards&quot;">​</a></h2><h3 id="code-standards" tabindex="-1">Code Standards <a class="header-anchor" href="#code-standards" aria-label="Permalink to &quot;Code Standards&quot;">​</a></h3><ul><li>Follow C# coding standards</li><li>Use MVVM pattern</li><li>Define UI using XAML</li><li>Use WPF controls</li><li>Separate complex logic into service classes</li><li>Use dependency injection</li></ul><h3 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-label="Permalink to &quot;Naming Conventions&quot;">​</a></h3><ul><li>Class names: PascalCase</li><li>Method names: PascalCase</li><li>Variable names: camelCase</li><li>Constant names: UPPER_CASE</li><li>Interface names: IPascalCase</li><li>File names: PascalCase.cs</li></ul><h3 id="comment-standards" tabindex="-1">Comment Standards <a class="header-anchor" href="#comment-standards" aria-label="Permalink to &quot;Comment Standards&quot;">​</a></h3><ul><li>Class comments: Explain the purpose of the class</li><li>Method comments: Explain parameters and return values</li><li>Complex logic comments: Explain implementation approach</li><li>Key code comments: Explain important logic</li></ul><h2 id="build-and-run" tabindex="-1">Build and Run <a class="header-anchor" href="#build-and-run" aria-label="Permalink to &quot;Build and Run&quot;">​</a></h2><h3 id="development-environment-1" tabindex="-1">Development Environment <a class="header-anchor" href="#development-environment-1" aria-label="Permalink to &quot;Development Environment&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clone the project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Cassianvale/LingYaoKeys.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Open solution</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingYaoKeys.sln</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><h3 id="release-packaging" tabindex="-1">Release Packaging <a class="header-anchor" href="#release-packaging" aria-label="Permalink to &quot;Release Packaging&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Publish Release version</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use Visual Studio&#39;s publish and packaging features</span></span></code></pre></div><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><h3 id="unit-testing" tabindex="-1">Unit Testing <a class="header-anchor" href="#unit-testing" aria-label="Permalink to &quot;Unit Testing&quot;">​</a></h3><ul><li>Use xUnit framework</li><li>Test ViewModel logic</li><li>Test Service functionality</li><li>Test utility class methods</li></ul><h3 id="integration-testing" tabindex="-1">Integration Testing <a class="header-anchor" href="#integration-testing" aria-label="Permalink to &quot;Integration Testing&quot;">​</a></h3><ul><li>Test UI interactions</li><li>Test driver functionality</li><li>Test performance</li><li>Test exception handling</li></ul><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><h3 id="driver-debugging" tabindex="-1">Driver Debugging <a class="header-anchor" href="#driver-debugging" aria-label="Permalink to &quot;Driver Debugging&quot;">​</a></h3><ol><li>Configure system to generate complete dump</li><li>Install debugging tools</li><li>Analyze using WinDbg</li><li>Review crash logs</li></ol><h3 id="application-debugging" tabindex="-1">Application Debugging <a class="header-anchor" href="#application-debugging" aria-label="Permalink to &quot;Application Debugging&quot;">​</a></h3><ol><li>Use Visual Studio debugger</li><li>Check log output</li><li>Analyze performance data</li><li>Monitor memory usage</li></ol><h2 id="contribution-guidelines" tabindex="-1">Contribution Guidelines <a class="header-anchor" href="#contribution-guidelines" aria-label="Permalink to &quot;Contribution Guidelines&quot;">​</a></h2><h3 id="submitting-prs" tabindex="-1">Submitting PRs <a class="header-anchor" href="#submitting-prs" aria-label="Permalink to &quot;Submitting PRs&quot;">​</a></h3><ol><li>Fork the project</li><li>Create a feature branch</li><li>Submit changes</li><li>Create a Pull Request</li></ol><h3 id="code-review" tabindex="-1">Code Review <a class="header-anchor" href="#code-review" aria-label="Permalink to &quot;Code Review&quot;">​</a></h3><ol><li>Follow code standards</li><li>Add necessary comments</li><li>Write unit tests</li><li>Update documentation</li></ol><h2 id="release-process" tabindex="-1">Release Process <a class="header-anchor" href="#release-process" aria-label="Permalink to &quot;Release Process&quot;">​</a></h2><h3 id="version-release" tabindex="-1">Version Release <a class="header-anchor" href="#version-release" aria-label="Permalink to &quot;Version Release&quot;">​</a></h3><ol><li>Update version number</li><li>Update changelog</li><li>Build release package</li><li>Create GitHub Release</li></ol><h3 id="documentation-updates" tabindex="-1">Documentation Updates <a class="header-anchor" href="#documentation-updates" aria-label="Permalink to &quot;Documentation Updates&quot;">​</a></h3><ol><li>Update API documentation</li><li>Update user guides</li><li>Update development documentation</li><li>Update FAQs</li></ol>`,40)]))}const g=a(l,[["render",t]]);export{u as __pageData,g as default};
