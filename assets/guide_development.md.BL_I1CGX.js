import{_ as s,c as i,o as e,ag as l}from"./chunks/framework.C48t5LJr.js";const u=JSON.parse('{"title":"开发相关","description":"","frontmatter":{},"headers":[],"relativePath":"guide/development.md","filePath":"guide/development.md","lastUpdated":1742378511000}'),n={name:"guide/development.md"};function t(p,a,o,r,h,d){return e(),i("div",null,a[0]||(a[0]=[l(`<h1 id="开发相关" tabindex="-1">开发相关 <a class="header-anchor" href="#开发相关" aria-label="Permalink to &quot;开发相关&quot;">​</a></h1><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LingYaoKeys/</span></span>
<span class="line"><span>├── Views/                          # View Layer</span></span>
<span class="line"><span>│   └── Controls/                   # Keyboard and Mouse Layout Logic</span></span>
<span class="line"><span>├── ViewModels/                     # ViewModel Layer</span></span>
<span class="line"><span>│   ├── ViewModelBase.cs           # Base ViewModel Class</span></span>
<span class="line"><span>│   ├── MainViewModel.cs           # Main Window ViewModel</span></span>
<span class="line"><span>│   ├── KeyMappingViewModel.cs     # Key Mapping ViewModel</span></span>
<span class="line"><span>│   ├── FloatingStatusViewModel.cs # Floating Status ViewModel</span></span>
<span class="line"><span>│   ├── QRCodeViewModel.cs         # QR Code ViewModel</span></span>
<span class="line"><span>│   ├── FeedbackViewModel.cs       # Feedback ViewModel</span></span>
<span class="line"><span>│   └── AboutViewModel.cs          # About ViewModel</span></span>
<span class="line"><span>├── Services/                       # Service Layer</span></span>
<span class="line"><span>│   ├── Core/                      # Core Services</span></span>
<span class="line"><span>│   │   ├── HotkeyService.cs        # Hotkey Service Implementation Class</span></span>
<span class="line"><span>│   │   ├── LyKeysService.cs      # Key Service Main Class</span></span>
<span class="line"><span>│   │   ├── LyKeys.cs             # Key Core Implementation Class</span></span>
<span class="line"><span>│   │   ├── LyKeysCode.cs         # Key Code Definition Class</span></span>
<span class="line"><span>│   │   ├── KeyMappingService.cs   # Key Mapping Service</span></span>
<span class="line"><span>│   │   └── InputMethodService.cs  # Input Method Service</span></span>
<span class="line"><span>│   ├── Models/                    # Service Models</span></span>
<span class="line"><span>│   │   ├── KeyItem.cs                # Key Item Model Class</span></span>
<span class="line"><span>│   │   ├── HoldKeyMode.cs           # Hold Key Mode Model Class</span></span>
<span class="line"><span>│   │   └── KeyModeBase.cs           # Key Mode Base Class</span></span>
<span class="line"><span>│   ├── Utils/                    # Utility Services</span></span>
<span class="line"><span>│   ├── Events/                   # Event Services</span></span>
<span class="line"><span>│   ├── Cache/                    # Cache Services</span></span>
<span class="line"><span>│   ├── Audio/                    # Audio Services</span></span>
<span class="line"><span>│   └── Config/                   # Configuration Services</span></span>
<span class="line"><span>├── Converters/                    # Value Converters</span></span>
<span class="line"><span>├── Behaviors/                     # Behavior Definitions</span></span>
<span class="line"><span>├── Styles/                        # Style Definitions</span></span>
<span class="line"><span>├── Resource/                      # Resource Files</span></span>
<span class="line"><span>└── App.xaml                       # Application Definition</span></span></code></pre></div><h2 id="开发环境" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境" aria-label="Permalink to &quot;开发环境&quot;">​</a></h2><h3 id="必需工具" tabindex="-1">必需工具 <a class="header-anchor" href="#必需工具" aria-label="Permalink to &quot;必需工具&quot;">​</a></h3><ul><li>Visual Studio 2022</li><li>.NET 8.0 SDK</li><li>Windows Driver Kit (WDK)</li><li>Git</li></ul><h3 id="推荐工具" tabindex="-1">推荐工具 <a class="header-anchor" href="#推荐工具" aria-label="Permalink to &quot;推荐工具&quot;">​</a></h3><ul><li>Visual Studio Code</li><li>Git Extensions</li><li>Postman (API测试)</li><li>Fiddler (网络调试)</li></ul><h2 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h2><h3 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h3><ul><li>遵循C#代码规范</li><li>使用MVVM模式</li><li>使用XAML定义UI</li><li>使用WPF控件</li><li>复杂逻辑分离到服务类</li><li>使用依赖注入</li></ul><h3 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h3><ul><li>类名：PascalCase</li><li>方法名：PascalCase</li><li>变量名：camelCase</li><li>常量名：UPPER_CASE</li><li>接口名：IPascalCase</li><li>文件名：PascalCase.cs</li></ul><h3 id="注释规范" tabindex="-1">注释规范 <a class="header-anchor" href="#注释规范" aria-label="Permalink to &quot;注释规范&quot;">​</a></h3><ul><li>类注释：说明类的用途</li><li>方法注释：说明参数和返回值</li><li>复杂逻辑注释：说明实现思路</li><li>关键代码注释：说明重要逻辑</li></ul><h2 id="构建和运行" tabindex="-1">构建和运行 <a class="header-anchor" href="#构建和运行" aria-label="Permalink to &quot;构建和运行&quot;">​</a></h2><h3 id="开发环境-1" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境-1" aria-label="Permalink to &quot;开发环境&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 克隆项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Cassianvale/LingYaoKeys.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打开解决方案</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LingYaoKeys.sln</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><h3 id="发布打包" tabindex="-1">发布打包 <a class="header-anchor" href="#发布打包" aria-label="Permalink to &quot;发布打包&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布Release版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用Visual Studio的发布和打包功能</span></span></code></pre></div><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><ul><li>使用xUnit框架</li><li>测试ViewModel逻辑</li><li>测试Service功能</li><li>测试工具类方法</li></ul><h3 id="集成测试" tabindex="-1">集成测试 <a class="header-anchor" href="#集成测试" aria-label="Permalink to &quot;集成测试&quot;">​</a></h3><ul><li>测试UI交互</li><li>测试驱动功能</li><li>测试性能表现</li><li>测试异常处理</li></ul><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h2><h3 id="驱动调试" tabindex="-1">驱动调试 <a class="header-anchor" href="#驱动调试" aria-label="Permalink to &quot;驱动调试&quot;">​</a></h3><ol><li>配置系统生成完整转储</li><li>安装调试工具</li><li>使用WinDbg分析</li><li>查看崩溃日志</li></ol><h3 id="应用调试" tabindex="-1">应用调试 <a class="header-anchor" href="#应用调试" aria-label="Permalink to &quot;应用调试&quot;">​</a></h3><ol><li>使用Visual Studio调试器</li><li>查看日志输出</li><li>分析性能数据</li><li>检查内存使用</li></ol><h2 id="贡献指南" tabindex="-1">贡献指南 <a class="header-anchor" href="#贡献指南" aria-label="Permalink to &quot;贡献指南&quot;">​</a></h2><h3 id="提交pr" tabindex="-1">提交PR <a class="header-anchor" href="#提交pr" aria-label="Permalink to &quot;提交PR&quot;">​</a></h3><ol><li>Fork项目</li><li>创建特性分支</li><li>提交更改</li><li>发起Pull Request</li></ol><h3 id="代码审查" tabindex="-1">代码审查 <a class="header-anchor" href="#代码审查" aria-label="Permalink to &quot;代码审查&quot;">​</a></h3><ol><li>遵循代码规范</li><li>添加必要注释</li><li>编写单元测试</li><li>更新文档</li></ol><h2 id="发布流程" tabindex="-1">发布流程 <a class="header-anchor" href="#发布流程" aria-label="Permalink to &quot;发布流程&quot;">​</a></h2><h3 id="版本发布" tabindex="-1">版本发布 <a class="header-anchor" href="#版本发布" aria-label="Permalink to &quot;版本发布&quot;">​</a></h3><ol><li>更新版本号</li><li>更新更新日志</li><li>构建发布包</li><li>创建GitHub Release</li></ol><h3 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h3><ol><li>更新API文档</li><li>更新使用说明</li><li>更新开发文档</li><li>更新常见问题</li></ol>`,40)]))}const k=s(n,[["render",t]]);export{u as __pageData,k as default};
