<Page x:Class="WpfApp.Views.KeyMappingView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:services="clr-namespace:WpfApp.Services"
      xmlns:vm="clr-namespace:WpfApp.ViewModels"
      xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
      xmlns:behaviors="clr-namespace:WpfApp.Behaviors"
      mc:Ignorable="d"
      Title="按键映射"
      PreviewMouseDown="Page_PreviewMouseDown">
    <!-- 添加 PreviewMouseDown 事件处理 -->
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <!-- 左侧按键列表区域 -->
        <DockPanel Grid.Column="0" Margin="0,0,10,0">
            <TextBox x:Name="KeyInputBox"
                     Style="{StaticResource ModernTextBox}"
                     IsEnabled="{Binding IsNotExecuting}"
                     Text="{Binding CurrentKeyText, Mode=OneWay}"
                     PreviewKeyDown="KeyInputBox_PreviewKeyDown"
                     PreviewMouseDown="KeyInputBox_PreviewMouseDown"
                     GotFocus="KeyInputBox_GotFocus"
                     LostFocus="KeyInputBox_LostFocus"
                     Height="32"
                     Margin="0,0,0,10"
                     TextAlignment="Center"
                     Tag="点此输入按键"
                     IsReadOnly="True"
                     IsUndoEnabled="False"
                     CaretBrush="Transparent"
                     DockPanel.Dock="Top"/>
                    
            <ListBox x:Name="KeysList" 
                     IsEnabled="{Binding IsNotExecuting}"
                     BorderThickness="1"
                     ItemsSource="{Binding KeyList}"
                     Background="White"
                     BorderBrush="#BDBDBD"
                     PreviewMouseDown="KeysList_PreviewMouseDown">
                <b:Interaction.Behaviors>
                    <behaviors:ListBoxDragDropBehavior />
                </b:Interaction.Behaviors>
                <ListBox.Template>
                    <ControlTemplate TargetType="ListBox">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ScrollViewer Padding="1" 
                                        Focusable="True"
                                        VerticalScrollBarVisibility="Auto"
                                        HorizontalScrollBarVisibility="Disabled"
                                        IsDeferredScrollingEnabled="True"
                                        CanContentScroll="True">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </ListBox.Template>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <CheckBox Style="{StaticResource ModernSwitch}"
                                  Content="{Binding DisplayName}"
                                  IsChecked="{Binding IsSelected}"
                                  Height="30"
                                  VerticalContentAlignment="Center"/>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="Height" Value="32"/>
                        <Setter Property="Padding" Value="5,0"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <Border x:Name="Bd"
                                            Background="{TemplateBinding Background}"
                                            BorderThickness="0"
                                            Padding="{TemplateBinding Padding}"
                                            SnapsToDevicePixels="true">
                                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Background" Value="#F5F9FF"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter Property="Background" Value="#E3F2FD"/>
                                        </Trigger>
                                        <Trigger Property="behaviors:DragDropProperties.IsDragTarget" Value="true">
                                            <Setter Property="Background" Value="#E3F2FD"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="true"/>
                                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="#E3F2FD"/>
                                        </MultiTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
        </DockPanel>

        <!-- 右侧设置区域 -->
        <StackPanel Grid.Column="1" Width="180">
            <!-- 顶部按钮组 -->
            <DockPanel Margin="0,0,0,10">
                <Button Style="{StaticResource RoundedShadowButtonSmall}"
                    Command="{Binding AddKeyCommand}"
                    Name="btnAddKey"
                    IsEnabled="{Binding IsNotExecuting}"
                    DockPanel.Dock="Left" 
                    Width="85" 
                    Height="32"
                    Margin="0,0,5,0"
                    Content="添加按键" />
                <Button Style="{StaticResource RoundedShadowButtonSmall}"
                    Command="{Binding DeleteSelectedKeysCommand}"
                    Name="btnDeleteSelectedKeys"
                    IsEnabled="{Binding IsNotExecuting}"
                    DockPanel.Dock="Right" 
                    Width="85" 
                    Height="32"
                    Margin="5,0,0,0"
                    Content="删除勾选" />
            </DockPanel>

            <!-- 状态显示 -->
            <Border 
                Margin="0,0,0,10" 
                Padding="4,4" 
                CornerRadius="8"
                Height="30"
                Background="{Binding IsHotkeyEnabled, Converter={StaticResource BoolToColorConverter}}">
                <TextBlock 
                    Text="{Binding HotkeyStatus}" 
                    Foreground="White"
                    FontWeight="Medium"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"/>
            </Border>

            <!-- 按键设置区域 -->
            <DockPanel Margin="0,0,0,10">
                <TextBlock Text="启动键" DockPanel.Dock="Left" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <TextBox x:Name="txtStartHotkey"
                         Style="{StaticResource ModernTextBox}"
                         IsEnabled="{Binding IsNotExecuting}"
                         Tag="空"
                         IsReadOnly="True"
                         Text="{Binding StartHotkeyText, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                         IsUndoEnabled="False"
                         CaretBrush="Transparent"
                         TextAlignment="Center"
                         PreviewKeyDown="StartHotkeyInput_PreviewKeyDown"
                         KeyDown="StartHotkeyInput_KeyDown"
                         PreviewMouseDown="StartHotkeyInput_PreviewMouseDown"
                         PreviewMouseUp="StartHotkeyInput_PreviewMouseUp"
                         MouseDown="StartHotkeyInput_MouseDown"
                         GotFocus="HotkeyInputBox_GotFocus"
                         LostFocus="HotkeyInputBox_LostFocus"/>
            </DockPanel>

            <DockPanel Margin="0,0,0,10" 
                       Visibility="{Binding IsSequenceMode, Converter={StaticResource BoolToVisibilityConverter}}">
                <TextBlock Text="停止键" DockPanel.Dock="Left" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <TextBox x:Name="txtStopHotkey"
                         Style="{StaticResource ModernTextBox}"
                         IsEnabled="{Binding IsNotExecuting}"
                         Tag="空"
                         IsReadOnly="True"
                         Text="{Binding StopHotkeyText, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                         IsUndoEnabled="False"
                         CaretBrush="Transparent"
                         TextAlignment="Center"
                         PreviewKeyDown="StopHotkeyInput_PreviewKeyDown"
                         PreviewMouseDown="StopHotkeyInput_PreviewMouseDown"
                         GotFocus="HotkeyInputBox_GotFocus"
                         LostFocus="HotkeyInputBox_LostFocus"/>
            </DockPanel>

            <!-- 按键模式和间隔设置 -->
            <DockPanel Margin="0,0,0,10">
                <TextBlock Text="按键模式" 
                           DockPanel.Dock="Left" 
                           VerticalAlignment="Center" 
                           Margin="0,0,0,0"
                           Width="50"/>
                <Button x:Name="btnModeHelp"
                        DockPanel.Dock="Left"
                        Style="{StaticResource CircleHelpButtonStyle}"
                        Width="18" Height="18"
                        FontSize="11"
                        Margin="0,0,10,0"
                        Click="ModeHelp_Click"
                        Content="?"
                        FontWeight="SemiBold">
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock Text="点击查看按键模式说明"/>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>

                <!-- 按键模式帮助提示浮窗 -->
                <Popup x:Name="modeHelpPopup" 
                       PlacementTarget="{Binding ElementName=btnModeHelp}"
                       Placement="Right" 
                       AllowsTransparency="True" 
                       PopupAnimation="Fade"
                       StaysOpen="False">
                    <Border Style="{StaticResource HelpPopupStyle}"
                            Width="280">
                        <StackPanel>
                            <TextBlock Style="{StaticResource HelpTextStyle}"
                                       Text="按键模式决定了按键的触发方式："/>
                            <TextBlock Style="{StaticResource HelpTextStyle}"
                                       Margin="0,8,0,0">
                                <Run Text="• 顺序模式" FontWeight="SemiBold"/>
                                <LineBreak/>
                                <Run Text="  按下启动键开始，按下停止键结束"/>
                                <LineBreak/>
                                <Run Text="  适合需要精确控制开始和结束的场景"/>
                                <LineBreak/>
                                <LineBreak/>
                                <Run Text="• 按压模式" FontWeight="SemiBold"/>
                                <LineBreak/>
                                <Run Text="  按住启动键时持续执行，松开后停止"/>
                                <LineBreak/>
                                <Run Text="  适合需要快速切换状态的场景"/>
                            </TextBlock>
                        </StackPanel>
                    </Border>
                </Popup>

                <ComboBox x:Name="cboKeyMode"
                          Style="{StaticResource ModernComboBox}"
                          ItemContainerStyle="{StaticResource ModernComboBoxItem}"
                          Width="100"
                          Height="32"
                          VerticalContentAlignment="Center"
                          HorizontalContentAlignment="Center"
                          ItemsSource="{Binding KeyModes}"
                          SelectedIndex="{Binding SelectedKeyMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}" 
                                      HorizontalAlignment="Center"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </DockPanel>

            <DockPanel Margin="0,0,0,10">
                <TextBlock Text="按键间隔" 
                           DockPanel.Dock="Left" 
                           VerticalAlignment="Center"
                           Margin="0,0,0,0"
                           Width="50"/>
                <Button x:Name="btnIntervalHelp"
                        DockPanel.Dock="Left"
                        Style="{StaticResource CircleHelpButtonStyle}"
                        Width="18" Height="18"
                        FontSize="11"
                        Margin="0,0,10,0"
                        Click="IntervalHelp_Click"
                        Content="?"
                        FontWeight="SemiBold">
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock Text="点击查看按键间隔说明"/>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>

                <!-- 帮助提示浮窗 -->
                <Popup x:Name="helpPopup" 
                       PlacementTarget="{Binding ElementName=btnIntervalHelp}"
                       Placement="Right" 
                       AllowsTransparency="True" 
                       PopupAnimation="Fade"
                       StaysOpen="False">
                    <Border Style="{StaticResource HelpPopupStyle}"
                            Width="280">
                        <StackPanel>
                            <TextBlock Style="{StaticResource HelpTextStyle}"
                                       Text="按键间隔是指连续按键之间的时间间隔，单位为毫秒(ms)，1秒=1000毫秒。"/>
                            <TextBlock Style="{StaticResource HelpTextStyle}"
                                       Margin="0,8,0,0">
                                <Run Text="• 间隔越短，按键速度越快"/>
                                <LineBreak/>
                                <Run Text="• 间隔越长，按键速度越慢"/>
                                <LineBreak/>
                                <Run Text="• 建议值范围：5-10ms"/>
                                <LineBreak/>
                                <Run Text="• 最小值：1ms"/>
                            </TextBlock>
                            <TextBlock Style="{StaticResource HelpTextStyle}"
                                       Margin="0,8,0,0"
                                       Foreground="#F44336"
                                       Text="注意：设置过短的间隔可能导致按键不稳定或游戏无法正确识别"/>
                        </StackPanel>
                    </Border>
                </Popup>
                <TextBox x:Name="txtKeyInterval"
                         Style="{StaticResource ModernTextBox}"
                         IsEnabled="{Binding IsNotExecuting}"
                         Width="100"
                         VerticalContentAlignment="Center"
                         TextAlignment="Center"
                         IsReadOnly="False"
                         PreviewTextInput="NumberValidationTextBox"
                         GotFocus="NumberInput_GotFocus"
                         LostFocus="NumberInput_LostFocus"
                         Text="{Binding KeyInterval, Converter={StaticResource IntToStringConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" DockPanel.Dock="Left"/>
            </DockPanel>

            <!-- 底部设置区域重新布局 -->
            <StackPanel Margin="0,0,0,0">
                <!-- 声音提示和游戏模式并排 -->
                <Grid Margin="0,0,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <CheckBox Grid.Column="0"
                              Style="{StaticResource ModernSwitch}"
                              Content="声音提示" 
                              Height="32"
                              VerticalContentAlignment="Center"
                              HorizontalAlignment="Left"
                              Margin="0,0,0,0"
                              Padding="0,0,0,0"
                              IsChecked="{Binding IsSoundEnabled, Mode=TwoWay}"/>
                              
                    <CheckBox Grid.Column="1"
                              Style="{StaticResource ModernSwitch}"
                              Content="游戏模式" 
                              Height="32"
                              VerticalContentAlignment="Center"
                              HorizontalAlignment="Left"
                              Margin="0,0,0,0"
                              Padding="0,0,0,0"
                              IsChecked="{Binding IsGameMode, Mode=TwoWay}"/>
                </Grid>

                <!-- 添加浮窗开关 -->
                <CheckBox Style="{StaticResource ModernSwitch}"
                          Content="状态浮窗" 
                          Height="32"
                          VerticalContentAlignment="Center"
                          HorizontalAlignment="Left"
                          Margin="0,0,0,0"
                          Padding="0,0,0,0"
                          IsChecked="{Binding IsFloatingWindowEnabled, Mode=TwoWay}"/>
            </StackPanel>
        </StackPanel>
    </Grid>
</Page> 